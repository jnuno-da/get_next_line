/* get_next_line.h */
#ifndef GET_NEXT_LINE_H
# define GET_NEXT_LINE_H

# include <stdlib.h>
# include <unistd.h>

# ifndef BUFFER_SIZE
#  define BUFFER_SIZE 42
# endif

char	*get_next_line(int fd);
char	*ft_strchr(char *s, int c);
char	*ft_strjoin(char *s1, char *s2);
size_t	ft_strlen(char *s);

#endif

/* get_next_line.c */
#include "get_next_line.h"

static char	*ft_get_line(char *stash)
{
    int		i;
    char	*str;

    i = 0;
    // Retorna NULL se não há conteúdo
    if (!stash[i])
        return (NULL);
    // Encontra o fim da linha ou fim da string
    while (stash[i] && stash[i] != '\n')
        i++;
    // Aloca memória para a linha (+2 para \n e \0)
    str = (char *)malloc(sizeof(char) * (i + 2));
    if (!str)
        return (NULL);
    i = 0;
    // Copia até encontrar \n ou \0
    while (stash[i] && stash[i] != '\n')
    {
        str[i] = stash[i];
        i++;
    }
    // Adiciona \n se existir
    if (stash[i] == '\n')
    {
        str[i] = stash[i];
        i++;
    }
    str[i] = '\0';
    return (str);
}

static char	*ft_update_stash(char *stash)
{
    int		i;
    int		j;
    char	*str;

    i = 0;
    // Encontra o fim da primeira linha
    while (stash[i] && stash[i] != '\n')
        i++;
    if (!stash[i])
    {
        free(stash);
        return (NULL);
    }
    // Aloca memória para o resto do conteúdo
    str = (char *)malloc(sizeof(char) * (ft_strlen(stash) - i + 1));
    if (!str)
        return (NULL);
    i++;
    j = 0;
    // Copia o resto do conteúdo
    while (stash[i])
        str[j++] = stash[i++];
    str[j] = '\0';
    free(stash);
    return (str);
}

static char	*ft_read_file(int fd, char *stash)
{
    char	*buffer;
    int		bytes_read;

    // Aloca buffer para leitura
    buffer = malloc(sizeof(char) * (BUFFER_SIZE + 1));
    if (!buffer)
        return (NULL);
    bytes_read = 1;
    // Lê até encontrar \n ou EOF
    while (!ft_strchr(stash, '\n') && bytes_read != 0)
    {
        bytes_read = read(fd, buffer, BUFFER_SIZE);
        if (bytes_read == -1)
        {
            free(buffer);
            free(stash);
            return (NULL);
        }
        buffer[bytes_read] = '\0';
        stash = ft_strjoin(stash, buffer);
    }
    free(buffer);
    return (stash);
}

char	*get_next_line(int fd)
{
    char		*line;
    static char	*stash;

    // Validações iniciais
    if (fd < 0 || BUFFER_SIZE <= 0)
        return (NULL);
    
    // Lê do arquivo e armazena no stash
    stash = ft_read_file(fd, stash);
    if (!stash)
        return (NULL);
    
    // Extrai a linha do stash
    line = ft_get_line(stash);
    
    // Atualiza o stash removendo a linha retornada
    stash = ft_update_stash(stash);
    
    return (line);
}

/* get_next_line_utils.c */
#include "get_next_line.h"

char	*ft_strchr(char *s, int c)
{
    int	i;

    i = 0;
    if (!s)
        return (0);
    if (c == '\0')
        return ((char *)&s[ft_strlen(s)]);
    while (s[i] != '\0')
    {
        if (s[i] == (char) c)
            return ((char *)&s[i]);
        i++;
    }
    return (0);
}

char	*ft_strjoin(char *s1, char *s2)
{
    size_t	i;
    size_t	j;
    char	*str;

    if (!s1)
    {
        s1 = (char *)malloc(1 * sizeof(char));
        s1[0] = '\0';
    }
    if (!s1 || !s2)
        return (NULL);
    str = malloc(sizeof(char) * ((ft_strlen(s1) + ft_strlen(s2)) + 1));
    if (str == NULL)
        return (NULL);
    i = -1;
    j = 0;
    if (s1)
        while (s1[++i] != '\0')
            str[i] = s1[i];
    while (s2[j] != '\0')
        str[i++] = s2[j++];
    str[ft_strlen(s1) + ft_strlen(s2)] = '\0';
    free(s1);
    return (str);
}

size_t	ft_strlen(char *s)
{
    size_t	i;

    i = 0;
    if (!s)
        return (0);
    while (s[i] != '\0')
        i++;
    return (i);
}
